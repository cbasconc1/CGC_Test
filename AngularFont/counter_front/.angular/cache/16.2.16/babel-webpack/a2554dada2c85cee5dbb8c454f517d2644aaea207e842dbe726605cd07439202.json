{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/counter-api.service\";\nexport class ButtonComponent {\n  constructor(counterApiService) {\n    this.counterApiService = counterApiService;\n  }\n  performAction() {\n    switch (this.action) {\n      case 'increment':\n        this.counterApiService.increment().subscribe(response => {\n          console.log('Valor después de incrementar:', response.value);\n        });\n        break;\n      case 'decrement':\n        this.counterApiService.decrement().subscribe(response => {\n          console.log('Valor después de decrementar:', response.value);\n        });\n        break;\n      case 'reset':\n        this.counterApiService.reset().subscribe(() => {\n          console.log('Contador reseteado.');\n        });\n        break;\n      case 'getValue':\n        this.counterApiService.getValue().subscribe(response => {\n          console.log('Valor actual del contador:', response.value);\n        });\n        break;\n      default:\n        console.error('Acción desconocida:', this.action);\n    }\n  }\n  static {\n    this.ɵfac = function ButtonComponent_Factory(t) {\n      return new (t || ButtonComponent)(i0.ɵɵdirectiveInject(i1.CounterApiService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ButtonComponent,\n      selectors: [[\"app-button\"]],\n      inputs: {\n        action: \"action\",\n        label: \"label\"\n      },\n      decls: 2,\n      vars: 1,\n      consts: [[3, \"click\"]],\n      template: function ButtonComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"button\", 0);\n          i0.ɵɵlistener(\"click\", function ButtonComponent_Template_button_click_0_listener() {\n            return ctx.performAction();\n          });\n          i0.ɵɵtext(1);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate(ctx.label);\n        }\n      },\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["ButtonComponent","constructor","counterApiService","performAction","action","increment","subscribe","response","console","log","value","decrement","reset","getValue","error","i0","ɵɵdirectiveInject","i1","CounterApiService","selectors","inputs","label","decls","vars","consts","template","ButtonComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","ButtonComponent_Template_button_click_0_listener","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate"],"sources":["C:\\Users\\cbasc\\Project\\project2\\restCounter\\AngularFont\\counter_front\\src\\app\\components\\button\\button.component.ts"],"sourcesContent":["// src/app/componentes/button/button.component.ts\nimport { Component, Input } from '@angular/core';\nimport { CounterApiService, CounterResponse } from '../../services/counter-api.service';\n\n@Component({\n  selector: 'app-button',\n  template: `\n    <button (click)=\"performAction()\">{{ label }}</button>\n  `,\n  styleUrls: ['./button.component.css']\n})\nexport class ButtonComponent {\n  @Input() action!: 'increment' | 'decrement' | 'reset' | 'getValue';\n  @Input() label!: string;\n\n\n  constructor(private counterApiService: CounterApiService) {}\n\n  performAction(): void {\n    switch (this.action) {\n      case 'increment':\n        this.counterApiService.increment().subscribe((response: CounterResponse) => {\n          console.log('Valor después de incrementar:', response.value);\n        });\n        break;\n      case 'decrement':\n        this.counterApiService.decrement().subscribe((response: CounterResponse) => {\n          console.log('Valor después de decrementar:', response.value);\n        });\n        break;\n      case 'reset':\n        this.counterApiService.reset().subscribe(() => {\n          console.log('Contador reseteado.');\n        });\n        break;\n      case 'getValue':\n        this.counterApiService.getValue().subscribe((response: CounterResponse) => {\n          console.log('Valor actual del contador:', response.value);\n        });\n        break;\n      default:\n        console.error('Acción desconocida:', this.action);\n    }\n  }\n}\n"],"mappings":";;AAWA,OAAM,MAAOA,eAAe;EAK1BC,YAAoBC,iBAAoC;IAApC,KAAAA,iBAAiB,GAAjBA,iBAAiB;EAAsB;EAE3DC,aAAaA,CAAA;IACX,QAAQ,IAAI,CAACC,MAAM;MACjB,KAAK,WAAW;QACd,IAAI,CAACF,iBAAiB,CAACG,SAAS,EAAE,CAACC,SAAS,CAAEC,QAAyB,IAAI;UACzEC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,QAAQ,CAACG,KAAK,CAAC;QAC9D,CAAC,CAAC;QACF;MACF,KAAK,WAAW;QACd,IAAI,CAACR,iBAAiB,CAACS,SAAS,EAAE,CAACL,SAAS,CAAEC,QAAyB,IAAI;UACzEC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,QAAQ,CAACG,KAAK,CAAC;QAC9D,CAAC,CAAC;QACF;MACF,KAAK,OAAO;QACV,IAAI,CAACR,iBAAiB,CAACU,KAAK,EAAE,CAACN,SAAS,CAAC,MAAK;UAC5CE,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QACpC,CAAC,CAAC;QACF;MACF,KAAK,UAAU;QACb,IAAI,CAACP,iBAAiB,CAACW,QAAQ,EAAE,CAACP,SAAS,CAAEC,QAAyB,IAAI;UACxEC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEF,QAAQ,CAACG,KAAK,CAAC;QAC3D,CAAC,CAAC;QACF;MACF;QACEF,OAAO,CAACM,KAAK,CAAC,qBAAqB,EAAE,IAAI,CAACV,MAAM,CAAC;;EAEvD;;;uBAhCWJ,eAAe,EAAAe,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,iBAAA;IAAA;EAAA;;;YAAflB,eAAe;MAAAmB,SAAA;MAAAC,MAAA;QAAAhB,MAAA;QAAAiB,KAAA;MAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,yBAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UAJxBZ,EAAA,CAAAc,cAAA,gBAAkC;UAA1Bd,EAAA,CAAAe,UAAA,mBAAAC,iDAAA;YAAA,OAASH,GAAA,CAAAzB,aAAA,EAAe;UAAA,EAAC;UAACY,EAAA,CAAAiB,MAAA,GAAW;UAAAjB,EAAA,CAAAkB,YAAA,EAAS;;;UAApBlB,EAAA,CAAAmB,SAAA,GAAW;UAAXnB,EAAA,CAAAoB,iBAAA,CAAAP,GAAA,CAAAP,KAAA,CAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}